import base64
import os
import shutil
from pathlib import Path
from typing import Dict


# this is base64 encoded source code
file_data: Dict = { # RandomSizedCrop(288, min_aspect=3/20, max_aspect=20/3, min_area=0.8)
                    'imet/transforms.py': 'aW1wb3J0IHJhbmRvbQppbXBvcnQgbWF0aAoKZnJvbSBQSUwgaW1wb3J0IEltYWdlCmZyb20gdG9yY2h2aXNpb24udHJhbnNmb3JtcyBpbXBvcnQgKAogICAgVG9UZW5zb3IsIE5vcm1hbGl6ZSwgQ29tcG9zZSwgUmVzaXplLCBDZW50ZXJDcm9wLCBSYW5kb21Dcm9wLAogICAgUmFuZG9tSG9yaXpvbnRhbEZsaXAsIFJhbmRvbVJlc2l6ZWRDcm9wKQoKCmNsYXNzIFJhbmRvbVNpemVkQ3JvcDoKICAgICIiIlJhbmRvbSBjcm9wIHRoZSBnaXZlbiBQSUwuSW1hZ2UgdG8gYSByYW5kb20gc2l6ZQogICAgb2YgdGhlIG9yaWdpbmFsIHNpemUgYW5kIGFuZCBhIHJhbmRvbSBhc3BlY3QgcmF0aW8KICAgIG9mIHRoZSBvcmlnaW5hbCBhc3BlY3QgcmF0aW8uCiAgICBzaXplOiBzaXplIG9mIHRoZSBzbWFsbGVyIGVkZ2UKICAgIGludGVycG9sYXRpb246IERlZmF1bHQ6IFBJTC5JbWFnZS5CSUxJTkVBUgogICAgIiIiCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHNpemUsIGludGVycG9sYXRpb249SW1hZ2UuQklMSU5FQVIsCiAgICAgICAgICAgICAgICAgbWluX2FzcGVjdD00LzUsIG1heF9hc3BlY3Q9NS80LAogICAgICAgICAgICAgICAgIG1pbl9hcmVhPTAuMjUsIG1heF9hcmVhPTEpOgogICAgICAgIHNlbGYuc2l6ZSA9IHNpemUKICAgICAgICBzZWxmLmludGVycG9sYXRpb24gPSBpbnRlcnBvbGF0aW9uCiAgICAgICAgc2VsZi5taW5fYXNwZWN0ID0gbWluX2FzcGVjdAogICAgICAgIHNlbGYubWF4X2FzcGVjdCA9IG1heF9hc3BlY3QKICAgICAgICBzZWxmLm1pbl9hcmVhID0gbWluX2FyZWEKICAgICAgICBzZWxmLm1heF9hcmVhID0gbWF4X2FyZWEKCiAgICBkZWYgX19jYWxsX18oc2VsZiwgaW1nKToKICAgICAgICBmb3IgYXR0ZW1wdCBpbiByYW5nZSgxMCk6CiAgICAgICAgICAgIGFyZWEgPSBpbWcuc2l6ZVswXSAqIGltZy5zaXplWzFdCiAgICAgICAgICAgIHRhcmdldF9hcmVhID0gcmFuZG9tLnVuaWZvcm0oc2VsZi5taW5fYXJlYSwgc2VsZi5tYXhfYXJlYSkgKiBhcmVhCiAgICAgICAgICAgIGFzcGVjdF9yYXRpbyA9IHJhbmRvbS51bmlmb3JtKHNlbGYubWluX2FzcGVjdCwgc2VsZi5tYXhfYXNwZWN0KQoKICAgICAgICAgICAgdyA9IGludChyb3VuZChtYXRoLnNxcnQodGFyZ2V0X2FyZWEgKiBhc3BlY3RfcmF0aW8pKSkKICAgICAgICAgICAgaCA9IGludChyb3VuZChtYXRoLnNxcnQodGFyZ2V0X2FyZWEgLyBhc3BlY3RfcmF0aW8pKSkKCiAgICAgICAgICAgIGlmIHJhbmRvbS5yYW5kb20oKSA8IDAuNToKICAgICAgICAgICAgICAgIHcsIGggPSBoLCB3CgogICAgICAgICAgICBpZiB3IDw9IGltZy5zaXplWzBdIGFuZCBoIDw9IGltZy5zaXplWzFdOgogICAgICAgICAgICAgICAgeDEgPSByYW5kb20ucmFuZGludCgwLCBpbWcuc2l6ZVswXSAtIHcpCiAgICAgICAgICAgICAgICB5MSA9IHJhbmRvbS5yYW5kaW50KDAsIGltZy5zaXplWzFdIC0gaCkKCiAgICAgICAgICAgICAgICBpbWcgPSBpbWcuY3JvcCgoeDEsIHkxLCB4MSArIHcsIHkxICsgaCkpCiAgICAgICAgICAgICAgICBhc3NlcnQoaW1nLnNpemUgPT0gKHcsIGgpKQoKICAgICAgICAgICAgICAgIHJldHVybiBpbWcucmVzaXplKChzZWxmLnNpemUsIHNlbGYuc2l6ZSksIHNlbGYuaW50ZXJwb2xhdGlvbikKCiAgICAgICAgIyBGYWxsYmFjawogICAgICAgIHNjYWxlID0gUmVzaXplKHNlbGYuc2l6ZSwgaW50ZXJwb2xhdGlvbj1zZWxmLmludGVycG9sYXRpb24pCiAgICAgICAgY3JvcCA9IENlbnRlckNyb3Aoc2VsZi5zaXplKQogICAgICAgIHJldHVybiBjcm9wKHNjYWxlKGltZykpCgoKdHJhaW5fdHJhbnNmb3JtID0gQ29tcG9zZShbCiAgICAjIFJhbmRvbUNyb3AoMzIwKSwKICAgICMgUmFuZG9tUmVzaXplZENyb3AoMzIwLCBzY2FsZT0oMC4wOCwgMS4wKSwgcmF0aW89KDEuMCwgMS4wKSksCiAgICBSYW5kb21TaXplZENyb3AoMjg4LCBtaW5fYXNwZWN0PTMvMjAsIG1heF9hc3BlY3Q9MjAvMywgbWluX2FyZWE9MC44KSwKICAgIFJhbmRvbUhvcml6b250YWxGbGlwKCksCl0pCgoKdGVzdF90cmFuc2Zvcm0gPSBDb21wb3NlKFsKICAgICMgUmFuZG9tQ3JvcCgzMjApLAogICAgIyBSYW5kb21SZXNpemVkQ3JvcCgzMjAsIHNjYWxlPSgwLjA4LCAxLjApLCByYXRpbz0oMS4wLCAxLjApKSwKICAgIFJhbmRvbVNpemVkQ3JvcCgyODgsIG1pbl9hc3BlY3Q9My8yMCwgbWF4X2FzcGVjdD0yMC8zLCBtaW5fYXJlYT0wLjgpLAogICAgUmFuZG9tSG9yaXpvbnRhbEZsaXAoKSwKXSkKCgp0ZW5zb3JfdHJhbnNmb3JtID0gQ29tcG9zZShbCiAgICBUb1RlbnNvcigpLAogICAgTm9ybWFsaXplKG1lYW49WzAuNDg1LCAwLjQ1NiwgMC40MDZdLCBzdGQ9WzAuMjI5LCAwLjIyNCwgMC4yMjVdKSwKXSkK',
                    'imet/make_submission.py': 'aW1wb3J0IGFyZ3BhcnNlCgppbXBvcnQgcGFuZGFzIGFzIHBkCgpmcm9tIC51dGlscyBpbXBvcnQgbWVhbl9kZgpmcm9tIC5kYXRhc2V0IGltcG9ydCBEQVRBX1JPT1QKZnJvbSAubWFpbiBpbXBvcnQgYmluYXJpemVfcHJlZGljdGlvbgoKCmRlZiBtYWluKCk6CiAgICBwYXJzZXIgPSBhcmdwYXJzZS5Bcmd1bWVudFBhcnNlcigpCiAgICBhcmcgPSBwYXJzZXIuYWRkX2FyZ3VtZW50CiAgICBhcmcoJ3ByZWRpY3Rpb25zJywgbmFyZ3M9JysnKQogICAgYXJnKCdvdXRwdXQnKQogICAgYXJnKCctLXRocmVzaG9sZCcsIHR5cGU9ZmxvYXQsIGRlZmF1bHQ9MC4yKQogICAgYXJncyA9IHBhcnNlci5wYXJzZV9hcmdzKCkKICAgIHNhbXBsZV9zdWJtaXNzaW9uID0gcGQucmVhZF9jc3YoCiAgICAgICAgREFUQV9ST09UIC8gJ3NhbXBsZV9zdWJtaXNzaW9uLmNzdicsIGluZGV4X2NvbD0naWQnKQogICAgZGZzID0gW10KICAgIGZvciBwcmVkaWN0aW9uIGluIGFyZ3MucHJlZGljdGlvbnM6CiAgICAgICAgZGYgPSBwZC5yZWFkX2hkZihwcmVkaWN0aW9uLCBpbmRleF9jb2w9J2lkJykKICAgICAgICBkZiA9IGRmLnJlaW5kZXgoc2FtcGxlX3N1Ym1pc3Npb24uaW5kZXgpCiAgICAgICAgZGZzLmFwcGVuZChkZikKICAgIGRmID0gcGQuY29uY2F0KGRmcykKICAgIGRmID0gbWVhbl9kZihkZikKICAgIGRmWzpdID0gYmluYXJpemVfcHJlZGljdGlvbihkZi52YWx1ZXMsIHRocmVzaG9sZD1hcmdzLnRocmVzaG9sZCkKICAgIGRmID0gZGYuYXBwbHkoZ2V0X2NsYXNzZXMsIGF4aXM9MSkKICAgIGRmLm5hbWUgPSAnYXR0cmlidXRlX2lkcycKICAgIGRmLnRvX2NzdihhcmdzLm91dHB1dCwgaGVhZGVyPVRydWUpCgoKZGVmIGdldF9jbGFzc2VzKGl0ZW0pOgogICAgcmV0dXJuICcgJy5qb2luKGNscyBmb3IgY2xzLCBpc19wcmVzZW50IGluIGl0ZW0uaXRlbXMoKSBpZiBpc19wcmVzZW50KQoKCmlmIF9fbmFtZV9fID09ICdfX21haW5fXyc6CiAgICBtYWluKCkK',
                    'imet/models.py': '',
                    'imet/__init__.py': 'aW1wb3J0IGN2MgoKCmN2Mi5zZXROdW1UaHJlYWRzKDApICAjIGZpeCBwb3RlbnRpYWwgcHl0b3JjaCB3b3JrZXIgaXNzdWVzCg==',
                    # possibly set seed
                    'imet/make_folds.py': 'aW1wb3J0IGFyZ3BhcnNlCmZyb20gY29sbGVjdGlvbnMgaW1wb3J0IGRlZmF1bHRkaWN0LCBDb3VudGVyCmltcG9ydCByYW5kb20KCmltcG9ydCBwYW5kYXMgYXMgcGQKaW1wb3J0IHRxZG0KCmZyb20gLmRhdGFzZXQgaW1wb3J0IERBVEFfUk9PVAoKCmRlZiBtYWtlX2ZvbGRzKG5fZm9sZHM6IGludCwgc2VlZDogaW50KSAtPiBwZC5EYXRhRnJhbWU6CiAgICBkZiA9IHBkLnJlYWRfY3N2KERBVEFfUk9PVCAvICd0cmFpbi5jc3YnKQogICAgY2xzX2NvdW50cyA9IENvdW50ZXIoY2xzIGZvciBjbGFzc2VzIGluIGRmWydhdHRyaWJ1dGVfaWRzJ10uc3RyLnNwbGl0KCkKICAgICAgICAgICAgICAgICAgICAgICAgIGZvciBjbHMgaW4gY2xhc3NlcykKICAgIGZvbGRfY2xzX2NvdW50cyA9IGRlZmF1bHRkaWN0KGludCkKICAgIGZvbGRzID0gWy0xXSAqIGxlbihkZikKICAgIGZvciBpdGVtIGluIHRxZG0udHFkbShkZi5zYW1wbGUoZnJhYz0xLCByYW5kb21fc3RhdGU9c2VlZCkuaXRlcnR1cGxlcygpLAogICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsPWxlbihkZikpOgogICAgICAgIGNscyA9IG1pbihpdGVtLmF0dHJpYnV0ZV9pZHMuc3BsaXQoKSwga2V5PWxhbWJkYSBjbHM6IGNsc19jb3VudHNbY2xzXSkKICAgICAgICBmb2xkX2NvdW50cyA9IFsoZiwgZm9sZF9jbHNfY291bnRzW2YsIGNsc10pIGZvciBmIGluIHJhbmdlKG5fZm9sZHMpXQogICAgICAgIG1pbl9jb3VudCA9IG1pbihbY291bnQgZm9yIF8sIGNvdW50IGluIGZvbGRfY291bnRzXSkKICAgICAgICByYW5kb20uc2VlZChpdGVtLkluZGV4KQogICAgICAgIGZvbGQgPSByYW5kb20uY2hvaWNlKFtmIGZvciBmLCBjb3VudCBpbiBmb2xkX2NvdW50cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBjb3VudCA9PSBtaW5fY291bnRdKQogICAgICAgIGZvbGRzW2l0ZW0uSW5kZXhdID0gZm9sZAogICAgICAgIGZvciBjbHMgaW4gaXRlbS5hdHRyaWJ1dGVfaWRzLnNwbGl0KCk6CiAgICAgICAgICAgIGZvbGRfY2xzX2NvdW50c1tmb2xkLCBjbHNdICs9IDEKICAgIGRmWydmb2xkJ10gPSBmb2xkcwogICAgcmV0dXJuIGRmCgoKZGVmIG1haW4oKToKICAgIHBhcnNlciA9IGFyZ3BhcnNlLkFyZ3VtZW50UGFyc2VyKCkKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoJy0tbi1mb2xkcycsIHR5cGU9aW50LCBkZWZhdWx0PTUpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCctLXNlZWQnLCB0eXBlPWludCwgZGVmYXVsdD00MikKICAgIGFyZ3MgPSBwYXJzZXIucGFyc2VfYXJncygpCiAgICBkZiA9IG1ha2VfZm9sZHMobl9mb2xkcz1hcmdzLm5fZm9sZHMsIHNlZWQ9YXJncy5zZWVkKQogICAgZGYudG9fY3N2KCdmb2xkcy5jc3YnLCBpbmRleD1Ob25lKQoKCmlmIF9fbmFtZV9fID09ICdfX21haW5fXyc6CiAgICBtYWluKCk=',
                    'imet/dataset.py': 'ZnJvbSBwYXRobGliIGltcG9ydCBQYXRoCmZyb20gdHlwaW5nIGltcG9ydCBDYWxsYWJsZSwgTGlzdAoKaW1wb3J0IGN2MgppbXBvcnQgcGFuZGFzIGFzIHBkCmZyb20gUElMIGltcG9ydCBJbWFnZQppbXBvcnQgdG9yY2gKZnJvbSB0b3JjaC51dGlscy5kYXRhIGltcG9ydCBEYXRhc2V0Cgpmcm9tIC50cmFuc2Zvcm1zIGltcG9ydCB0ZW5zb3JfdHJhbnNmb3JtCmZyb20gLnV0aWxzIGltcG9ydCBPTl9LQUdHTEUKCgpOX0NMQVNTRVMgPSAxMTAzCkRBVEFfUk9PVCA9IFBhdGgoJy4uL2lucHV0L2ltZXQtMjAxOS1mZ3ZjNicgaWYgT05fS0FHR0xFIGVsc2UgJy4vZGF0YScpCgoKY2xhc3MgVHJhaW5EYXRhc2V0KERhdGFzZXQpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHJvb3Q6IFBhdGgsIGRmOiBwZC5EYXRhRnJhbWUsCiAgICAgICAgICAgICAgICAgaW1hZ2VfdHJhbnNmb3JtOiBDYWxsYWJsZSwgZGVidWc6IGJvb2wgPSBUcnVlKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKCkKICAgICAgICBzZWxmLl9yb290ID0gcm9vdAogICAgICAgIHNlbGYuX2RmID0gZGYKICAgICAgICBzZWxmLl9pbWFnZV90cmFuc2Zvcm0gPSBpbWFnZV90cmFuc2Zvcm0KICAgICAgICBzZWxmLl9kZWJ1ZyA9IGRlYnVnCgogICAgZGVmIF9fbGVuX18oc2VsZik6CiAgICAgICAgcmV0dXJuIGxlbihzZWxmLl9kZikKCiAgICBkZWYgX19nZXRpdGVtX18oc2VsZiwgaWR4OiBpbnQpOgogICAgICAgIGl0ZW0gPSBzZWxmLl9kZi5pbG9jW2lkeF0KICAgICAgICBpbWFnZSA9IGxvYWRfdHJhbnNmb3JtX2ltYWdlKAogICAgICAgICAgICBpdGVtLCBzZWxmLl9yb290LCBzZWxmLl9pbWFnZV90cmFuc2Zvcm0sIGRlYnVnPXNlbGYuX2RlYnVnKQogICAgICAgIHRhcmdldCA9IHRvcmNoLnplcm9zKE5fQ0xBU1NFUykKICAgICAgICBmb3IgY2xzIGluIGl0ZW0uYXR0cmlidXRlX2lkcy5zcGxpdCgpOgogICAgICAgICAgICB0YXJnZXRbaW50KGNscyldID0gMQogICAgICAgIHJldHVybiBpbWFnZSwgdGFyZ2V0CgoKY2xhc3MgVFRBRGF0YXNldDoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCByb290OiBQYXRoLCBkZjogcGQuRGF0YUZyYW1lLAogICAgICAgICAgICAgICAgIGltYWdlX3RyYW5zZm9ybTogQ2FsbGFibGUsIHR0YTogaW50KToKICAgICAgICBzZWxmLl9yb290ID0gcm9vdAogICAgICAgIHNlbGYuX2RmID0gZGYKICAgICAgICBzZWxmLl9pbWFnZV90cmFuc2Zvcm0gPSBpbWFnZV90cmFuc2Zvcm0KICAgICAgICBzZWxmLl90dGEgPSB0dGEKCiAgICBkZWYgX19sZW5fXyhzZWxmKToKICAgICAgICByZXR1cm4gbGVuKHNlbGYuX2RmKSAqIHNlbGYuX3R0YQoKICAgIGRlZiBfX2dldGl0ZW1fXyhzZWxmLCBpZHgpOgogICAgICAgIGl0ZW0gPSBzZWxmLl9kZi5pbG9jW2lkeCAlIGxlbihzZWxmLl9kZildCiAgICAgICAgaW1hZ2UgPSBsb2FkX3RyYW5zZm9ybV9pbWFnZShpdGVtLCBzZWxmLl9yb290LCBzZWxmLl9pbWFnZV90cmFuc2Zvcm0pCiAgICAgICAgcmV0dXJuIGltYWdlLCBpdGVtLmlkCgoKZGVmIGxvYWRfdHJhbnNmb3JtX2ltYWdlKAogICAgICAgIGl0ZW0sIHJvb3Q6IFBhdGgsIGltYWdlX3RyYW5zZm9ybTogQ2FsbGFibGUsIGRlYnVnOiBib29sID0gRmFsc2UpOgogICAgaW1hZ2UgPSBsb2FkX2ltYWdlKGl0ZW0sIHJvb3QpCiAgICBpbWFnZSA9IGltYWdlX3RyYW5zZm9ybShpbWFnZSkKICAgIGlmIGRlYnVnOgogICAgICAgIGltYWdlLnNhdmUoJ19kZWJ1Zy5wbmcnKQogICAgcmV0dXJuIHRlbnNvcl90cmFuc2Zvcm0oaW1hZ2UpCgoKZGVmIGxvYWRfaW1hZ2UoaXRlbSwgcm9vdDogUGF0aCkgLT4gSW1hZ2UuSW1hZ2U6CiAgICBpbWFnZSA9IGN2Mi5pbXJlYWQoc3RyKHJvb3QgLyBmJ3tpdGVtLmlkfS5wbmcnKSkKICAgIGltYWdlID0gY3YyLmN2dENvbG9yKGltYWdlLCBjdjIuQ09MT1JfQkdSMlJHQikKICAgIHJldHVybiBJbWFnZS5mcm9tYXJyYXkoaW1hZ2UpCgoKZGVmIGdldF9pZHMocm9vdDogUGF0aCkgLT4gTGlzdFtzdHJdOgogICAgcmV0dXJuIHNvcnRlZCh7cC5uYW1lLnNwbGl0KCdfJylbMF0gZm9yIHAgaW4gcm9vdC5nbG9iKCcqLnBuZycpfSkK',
                    'imet/utils.py': 'ZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWUKaW1wb3J0IGpzb24KaW1wb3J0IGdsb2IKaW1wb3J0IG9zCmZyb20gcGF0aGxpYiBpbXBvcnQgUGF0aApmcm9tIG11bHRpcHJvY2Vzc2luZy5wb29sIGltcG9ydCBUaHJlYWRQb29sCmZyb20gdHlwaW5nIGltcG9ydCBEaWN0CgppbXBvcnQgbnVtcHkgYXMgbnAKaW1wb3J0IHBhbmRhcyBhcyBwZApmcm9tIHNjaXB5LnN0YXRzLm1zdGF0cyBpbXBvcnQgZ21lYW4KaW1wb3J0IHRvcmNoCmZyb20gdG9yY2ggaW1wb3J0IG5uCmZyb20gdG9yY2gudXRpbHMuZGF0YSBpbXBvcnQgRGF0YUxvYWRlcgoKCk9OX0tBR0dMRTogYm9vbCA9ICdLQUdHTEVfV09SS0lOR19ESVInIGluIG9zLmVudmlyb24KCgpkZWYgZ21lYW5fZGYoZGY6IHBkLkRhdGFGcmFtZSkgLT4gcGQuRGF0YUZyYW1lOgogICAgcmV0dXJuIGRmLmdyb3VwYnkobGV2ZWw9MCkuYWdnKGxhbWJkYSB4OiBnbWVhbihsaXN0KHgpKSkKCgpkZWYgbWVhbl9kZihkZjogcGQuRGF0YUZyYW1lKSAtPiBwZC5EYXRhRnJhbWU6CiAgICByZXR1cm4gZGYuZ3JvdXBieShsZXZlbD0wKS5tZWFuKCkKCgpkZWYgbG9hZF9tb2RlbChtb2RlbDogbm4uTW9kdWxlLCBwYXRoOiBQYXRoKSAtPiBEaWN0OgogICAgc3RhdGUgPSB0b3JjaC5sb2FkKHN0cihwYXRoKSkKICAgIG1vZGVsLmxvYWRfc3RhdGVfZGljdChzdGF0ZVsnbW9kZWwnXSkKICAgIHByaW50KCdMb2FkZWQgbW9kZWwgZnJvbSBlcG9jaCB7ZXBvY2h9LCBzdGVwIHtzdGVwOix9Jy5mb3JtYXQoKipzdGF0ZSkpCiAgICByZXR1cm4gc3RhdGUKCgpjbGFzcyBUaHJlYWRpbmdEYXRhTG9hZGVyKERhdGFMb2FkZXIpOgogICAgZGVmIF9faXRlcl9fKHNlbGYpOgogICAgICAgIHNhbXBsZV9pdGVyID0gaXRlcihzZWxmLmJhdGNoX3NhbXBsZXIpCiAgICAgICAgaWYgc2VsZi5udW1fd29ya2VycyA9PSAwOgogICAgICAgICAgICBmb3IgaW5kaWNlcyBpbiBzYW1wbGVfaXRlcjoKICAgICAgICAgICAgICAgIHlpZWxkIHNlbGYuY29sbGF0ZV9mbihbc2VsZi5fZ2V0X2l0ZW0oaSkgZm9yIGkgaW4gaW5kaWNlc10pCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcHJlZmV0Y2ggPSAxCiAgICAgICAgICAgIHdpdGggVGhyZWFkUG9vbChwcm9jZXNzZXM9c2VsZi5udW1fd29ya2VycykgYXMgcG9vbDoKICAgICAgICAgICAgICAgIGZ1dHVyZXMgPSBbXQogICAgICAgICAgICAgICAgZm9yIGluZGljZXMgaW4gc2FtcGxlX2l0ZXI6CiAgICAgICAgICAgICAgICAgICAgZnV0dXJlcy5hcHBlbmQoW3Bvb2wuYXBwbHlfYXN5bmMoc2VsZi5fZ2V0X2l0ZW0sIGFyZ3M9KGksKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGkgaW4gaW5kaWNlc10pCiAgICAgICAgICAgICAgICAgICAgaWYgbGVuKGZ1dHVyZXMpID4gcHJlZmV0Y2g6CiAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkIHNlbGYuY29sbGF0ZV9mbihbZi5nZXQoKSBmb3IgZiBpbiBmdXR1cmVzLnBvcCgwKV0pCiAgICAgICAgICAgICAgICAgICAgIyBpdGVtcyA9IHBvb2wubWFwKGxhbWJkYSBpOiBzZWxmLmRhdGFzZXRbaV0sIGluZGljZXMpCiAgICAgICAgICAgICAgICAgICAgIyB5aWVsZCBzZWxmLmNvbGxhdGVfZm4oaXRlbXMpCiAgICAgICAgICAgICAgICBmb3IgYmF0Y2hfZnV0dXJlcyBpbiBmdXR1cmVzOgogICAgICAgICAgICAgICAgICAgIHlpZWxkIHNlbGYuY29sbGF0ZV9mbihbZi5nZXQoKSBmb3IgZiBpbiBiYXRjaF9mdXR1cmVzXSkKCiAgICBkZWYgX2dldF9pdGVtKHNlbGYsIGkpOgogICAgICAgIHJldHVybiBzZWxmLmRhdGFzZXRbaV0KCgpkZWYgd3JpdGVfZXZlbnQobG9nLCBzdGVwOiBpbnQsICoqZGF0YSk6CiAgICBkYXRhWydzdGVwJ10gPSBzdGVwCiAgICBkYXRhWydkdCddID0gZGF0ZXRpbWUubm93KCkuaXNvZm9ybWF0KCkKICAgIGxvZy53cml0ZShqc29uLmR1bXBzKGRhdGEsIHNvcnRfa2V5cz1UcnVlKSkKICAgIGxvZy53cml0ZSgnXG4nKQogICAgbG9nLmZsdXNoKCkKCgpkZWYgcGxvdCgqYXJncywgeW1pbj1Ob25lLCB5bWF4PU5vbmUsIHhtaW49Tm9uZSwgeG1heD1Ob25lLCBwYXJhbXM9RmFsc2UsCiAgICAgICAgIG1heF9wb2ludHM9MjAwLCBsZWdlbmQ9VHJ1ZSwgdGl0bGU9Tm9uZSwKICAgICAgICAgcHJpbnRfa2V5cz1GYWxzZSwgcHJpbnRfcGF0aHM9RmFsc2UsIHBsdD1Ob25lLCBuZXdmaWd1cmU9VHJ1ZSwKICAgICAgICAgeF9zY2FsZT0xKToKICAgICIiIgogICAgVXNlIGluIHRoZSBub3RlYm9vayBsaWtlIHRoaXM6OgoKICAgICAgICAlbWF0cGxvdGxpYiBpbmxpbmUKICAgICAgICBmcm9tIGltZXQudXRpbHMgaW1wb3J0IHBsb3QKICAgICAgICBwbG90KCcuL3J1bnMvb2MyJywgJy4vcnVucy9vYzEnLCAnbG9zcycsICd2YWxpZF9sb3NzJykKCiAgICAiIiIKICAgIGltcG9ydCBqc29uX2xpbmVzICAjIG5vIGF2YWlsYWJsZSBvbiBLYWdnbGUKCiAgICBpZiBwbHQgaXMgTm9uZToKICAgICAgICBmcm9tIG1hdHBsb3RsaWIgaW1wb3J0IHB5cGxvdCBhcyBwbHQKICAgIHBhdGhzLCBrZXlzID0gW10sIFtdCiAgICBmb3IgeCBpbiBhcmdzOgogICAgICAgIGlmIHguc3RhcnRzd2l0aCgnLicpIG9yICcvJyBpbiB4OgogICAgICAgICAgICBpZiAnKicgaW4geDoKICAgICAgICAgICAgICAgIHBhdGhzLmV4dGVuZChnbG9iLmdsb2IoeCkpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBwYXRocy5hcHBlbmQoeCkKICAgICAgICBlbHNlOgogICAgICAgICAgICBrZXlzLmFwcGVuZCh4KQogICAgaWYgcHJpbnRfcGF0aHM6CiAgICAgICAgcHJpbnQoJ0ZvdW5kIHBhdGhzOiB7fScuZm9ybWF0KCcgJy5qb2luKHNvcnRlZChwYXRocykpKSkKICAgIGlmIG5ld2ZpZ3VyZToKICAgICAgICBwbHQuZmlndXJlKGZpZ3NpemU9KDEyLCA4KSkKICAgIGtleXMgPSBrZXlzIG9yIFsnbG9zcycsICd2YWxpZF9sb3NzJ10KCiAgICB5bGltX2t3ID0ge30KICAgIGlmIHltaW4gaXMgbm90IE5vbmU6CiAgICAgICAgeWxpbV9rd1snYm90dG9tJ10gPSB5bWluCiAgICBpZiB5bWF4IGlzIG5vdCBOb25lOgogICAgICAgIHlsaW1fa3dbJ3RvcCddID0geW1heAogICAgaWYgeWxpbV9rdzoKICAgICAgICBwbHQueWxpbSgqKnlsaW1fa3cpCgogICAgeGxpbV9rdyA9IHt9CiAgICBpZiB4bWluIGlzIG5vdCBOb25lOgogICAgICAgIHhsaW1fa3dbJ2xlZnQnXSA9IHhtaW4KICAgIGlmIHhtYXggaXMgbm90IE5vbmU6CiAgICAgICAgeGxpbV9rd1sncmlnaHQnXSA9IHhtYXgKICAgIGlmIHhsaW1fa3c6CiAgICAgICAgcGx0LnhsaW0oKip4bGltX2t3KQogICAgYWxsX2tleXMgPSBzZXQoKQogICAgZm9yIHBhdGggaW4gc29ydGVkKHBhdGhzKToKICAgICAgICBwYXRoID0gUGF0aChwYXRoKQogICAgICAgIHdpdGgganNvbl9saW5lcy5vcGVuKHBhdGggLyAndHJhaW4ubG9nJywgYnJva2VuPVRydWUpIGFzIGY6CiAgICAgICAgICAgIGV2ZW50cyA9IGxpc3QoZikKICAgICAgICBhbGxfa2V5cy51cGRhdGUoayBmb3IgZSBpbiBldmVudHMgZm9yIGsgaW4gZSkKICAgICAgICBmb3Iga2V5IGluIHNvcnRlZChrZXlzKToKICAgICAgICAgICAgeHMsIHlzLCB5c19lcnIgPSBbXSwgW10sIFtdCiAgICAgICAgICAgIGZvciBlIGluIGV2ZW50czoKICAgICAgICAgICAgICAgIGlmIGtleSBpbiBlOgogICAgICAgICAgICAgICAgICAgIHhzLmFwcGVuZChlWydzdGVwJ10gKiB4X3NjYWxlKQogICAgICAgICAgICAgICAgICAgIHlzLmFwcGVuZChlW2tleV0pCiAgICAgICAgICAgICAgICAgICAgc3RkX2tleSA9IGtleSArICdfc3RkJwogICAgICAgICAgICAgICAgICAgIGlmIHN0ZF9rZXkgaW4gZToKICAgICAgICAgICAgICAgICAgICAgICAgeXNfZXJyLmFwcGVuZChlW3N0ZF9rZXldKQogICAgICAgICAgICBpZiB4czoKICAgICAgICAgICAgICAgIGlmIG5wLmlzbmFuKHlzKS5hbnkoKToKICAgICAgICAgICAgICAgICAgICBwcmludCgnV2FybmluZzogTmFOIHt9IGZvciB7fScuZm9ybWF0KGtleSwgcGF0aCkpCiAgICAgICAgICAgICAgICBpZiBsZW4oeHMpID4gMiAqIG1heF9wb2ludHM6CiAgICAgICAgICAgICAgICAgICAgaW5kaWNlcyA9IChucC5hcmFuZ2UoMCwgbGVuKHhzKSAtIDEsIGxlbih4cykgLyBtYXhfcG9pbnRzKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFzdHlwZShucC5pbnQzMikpCiAgICAgICAgICAgICAgICAgICAgeHMgPSBucC5hcnJheSh4cylbaW5kaWNlc1sxOl1dCiAgICAgICAgICAgICAgICAgICAgeXMgPSBfc21vb3RoKHlzLCBpbmRpY2VzKQogICAgICAgICAgICAgICAgICAgIGlmIHlzX2VycjoKICAgICAgICAgICAgICAgICAgICAgICAgeXNfZXJyID0gX3Ntb290aCh5c19lcnIsIGluZGljZXMpCiAgICAgICAgICAgICAgICBsYWJlbCA9ICd7fToge30nLmZvcm1hdChwYXRoLCBrZXkpCiAgICAgICAgICAgICAgICBpZiBsYWJlbC5zdGFydHN3aXRoKCdfJyk6CiAgICAgICAgICAgICAgICAgICAgbGFiZWwgPSAnICcgKyBsYWJlbAogICAgICAgICAgICAgICAgaWYgeXNfZXJyOgogICAgICAgICAgICAgICAgICAgIHlzX2VyciA9IDEuOTYgKiBucC5hcnJheSh5c19lcnIpCiAgICAgICAgICAgICAgICAgICAgcGx0LmVycm9yYmFyKHhzLCB5cywgeWVycj15c19lcnIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZtdD0nLW8nLCBjYXBzaXplPTUsIGNhcHRoaWNrPTIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPWxhYmVsKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwbHQucGxvdCh4cywgeXMsIGxhYmVsPWxhYmVsKQogICAgICAgICAgICAgICAgcGx0LmxlZ2VuZCgpCiAgICBpZiBuZXdmaWd1cmU6CiAgICAgICAgcGx0LmdyaWQoKQogICAgaWYgbGVnZW5kOgogICAgICAgIHBsdC5sZWdlbmQoKQogICAgaWYgdGl0bGU6CiAgICAgICAgcGx0LnRpdGxlKHRpdGxlKQogICAgaWYgcHJpbnRfa2V5czoKICAgICAgICBwcmludCgnRm91bmQga2V5czoge30nCiAgICAgICAgICAgICAgLmZvcm1hdCgnLCAnLmpvaW4oc29ydGVkKGFsbF9rZXlzIC0geydzdGVwJywgJ2R0J30pKSkpCgoKZGVmIF9zbW9vdGgoeXMsIGluZGljZXMpOgogICAgcmV0dXJuIFtucC5tZWFuKHlzW2lkeDogaW5kaWNlc1tpICsgMV1dKQogICAgICAgICAgICBmb3IgaSwgaWR4IGluIGVudW1lcmF0ZShpbmRpY2VzWzotMV0pXQo=',
                    # save best f2
                    'imet/main.py': '',
                    'setup.py': 'ZnJvbSBzZXR1cHRvb2xzIGltcG9ydCBzZXR1cAoKc2V0dXAoCiAgICBuYW1lPSdpbWV0JywKICAgIHBhY2thZ2VzPVsnaW1ldCddLAop'
                    }


for path, encoded in file_data.items():
    print(path)
    path = Path(path)
    path.parent.mkdir(exist_ok=True)
    path.write_bytes(base64.b64decode(encoded))


def run(command):
    os.system('export PYTHONPATH=${PYTHONPATH}:/kaggle/working && ' + command)

## densenet121
#os.makedirs('../input/densenet121')
#shutil.copy('../input/pytorch-pretrained-image-models/densenet121.pth', '../input/densenet121/')

## densenet169 xxx
#os.makedirs('../input/densenet169')
#shutil.copy('../input/pytorch-pretrained-models/densenet169-b2777c0a.pth', '../input/densenet169/densenet169.pth')

## densenet201
#os.makedirs('../input/densenet201')
#shutil.copy('../input/pytorch-pretrained-image-models/densenet201.pth', '../input/densenet201/')

## densenet161 xxx
#os.makedirs('../input/densenet161')
#shutil.copy('../input/pytorch-densenet-pretrained/densenet161-8d451a50.pth', '../input/densenet161/densenet161.pth')

## inception v3
#os.makedirs('../input/inception_v3')
#shutil.copy('../input/pytorch-pretrained-models/inception_v3_google-1a9a5a14.pth', '../input/inception_v3/inception_v3.pth')

## se_resnet50
#os.makedirs('../input/se_resnet50')
#shutil.copy('../input/pytorch-pretrained-seresnet/se_resnet50-ce0d4300.pth', '../input/se_resnet50/se_resnet50.pth')

## se_resnet101
#os.makedirs('../input/se_resnet101')
#shutil.copy('../input/pytorch-pretrained-seresnet/se_resnet101-7e38fcc6.pth', '../input/se_resnet101/se_resnet101.pth')

## se_resnet152
#os.makedirs('../input/se_resnet152')
#shutil.copy('../input/pytorch-pretrained-seresnet/se_resnet152-d17c99b7.pth', '../input/se_resnet152/se_resnet152.pth')

## se_resnext50_32x4d
os.makedirs('../input/se_resnext50_32x4d')
shutil.copy('../input/pytorch-pretrained-seresnet/se_resnext50_32x4d-a260b3a4.pth', '../input/se_resnext50_32x4d/se_resnext50_32x4d.pth')

## se_resnext101_32x4d
#os.makedirs('../input/se_resnext101_32x4d')
#shutil.copy('../input/pytorch-pretrained-seresnet/se_resnext101_32x4d-3b2fe3d8.pth', '../input/se_resnext101_32x4d/se_resnext101_32x4d.pth')


print(os.listdir('/kaggle/working/'))
run('python setup.py develop --install-dir /kaggle/working')
run('python -m imet.make_folds --n-folds 5 --seed 42')
run('python -m imet.main train model_1 --n-epochs 15 --model se_resnext50_32x4d --batch-size 32')
#print(os.listdir('/kaggle/working/'))
#run('python -m imet.main predict_test model_1 --model se_resnext101_32x4d --batch-size 32')
#run('python -m imet.make_submission model_1/test.h5 submission.csv --threshold 0.10')